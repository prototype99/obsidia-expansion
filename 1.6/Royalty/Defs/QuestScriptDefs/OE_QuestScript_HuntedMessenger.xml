<?xml version="1.0" encoding="utf-8" ?>

<Defs>
<!--=============== Quest - Hunted Messenger ====================-->
  <QuestScriptDef>
    <defName>OE_Quest_HuntedMessenger</defName>
    <expireDaysRange>2~3</expireDaysRange>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>0</rootMinPoints>
    <defaultCharity>true</defaultCharity>
    <successHistoryEvent MayRequire="Ludeon.RimWorld.Ideology">CharityFulfilled_IntroWimp</successHistoryEvent>
    <failedOrExpiredHistoryEvent MayRequire="Ludeon.RimWorld.Ideology">CharityRefused_IntroWimp</failedOrExpiredHistoryEvent>
    <questNameRules>
      <rulesStrings>
        <li>questName->Saving [askerIndef]</li>
		<li>questName->Helping [askerIndef]</li>
		<li>questName->the [askerAdj] [askerIndef]</li>
		<li>questName->[askerIndef] Chased by [enemyFaction_pawnsPlural]</li>
		<li>questName->[enemyFaction_pawnsPlural] hunting [askerIndef]</li>
		<li>questName->Shadows in Pursuit</li>
        <!-- Pieces -->
        <li>askerAdj->hunted</li>
		<li>askerAdj->last</li>
        <li>askerAdj->fleeing</li>
        <li>askerAdj->ambushed</li>
		<li>askerIndef->courier</li>
		<li>askerIndef->messenger</li>
		<li>askerIndef->survival</li>
		<li>askerIndef->[asker_nameFull]</li>
		<li>askerIndef->[asker_royalTitleInCurrentFaction]</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <include>
        <li>QuestHospitalityCommon</li>
      </include>
      <rulesStrings>
        <li>questDescription->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], barely escaped an ambush. [asker_possessive] guards were slaughtered, and now [asker_pronoun] is being hunted. [asker_nameDef] needs your help to stay hidden at [map_definite] for a few hours until a shuttle arrives. In return, [asker_pronoun] promises a reward of [royalFavorReward] [asker_faction_royalFavorLabel].\nThe group of [enemyFaction_pawnsPlural] is composed of:\n[raid/raidPawnKinds]\n\n[asker_nameDef] is too frantic to offer more information.</li>
		
		<li>questDescription->[asker_nameFull], the luckiest [asker_royalTitleInCurrentFaction] from [asker_faction_name], somehow managed to escape a deadly ambush that took out all [asker_possessive] guards. Now, [asker_pronoun] is being chased down and needs a hero (or just someone who can stand still for a few hours). If you can keep [asker_objective] alive at [map_definite] until the shuttle arrives, you’ll get [royalFavorReward] [asker_faction_royalFavorLabel].\nThe group of [enemyFaction_pawnsPlural] is composed of:\n[raid/raidPawnKinds]\n\n[asker_nameDef] is too frantic to offer more information.</li>
		
		<li>questDescription->[asker_nameFull], a broken and desperate [asker_royalTitleInCurrentFaction] of [asker_faction_name], fled from the bloodbath that claimed [asker_possessive] guards. Alone, hunted, and haunted by the cries of the fallen, [asker_pronoun] seeks refuge. The chase isn’t over—enemies are closing in. Shelter [asker_nameDef] at [map_definite] until the shuttle comes, and in exchange, you will be rewarded with [royalFavorReward] [asker_faction_royalFavorLabel].\nThe group of [enemyFaction_pawnsPlural] is composed of:\n[raid/raidPawnKinds]\n\n[asker_nameDef] is too frantic to offer more information.</li>
      </rulesStrings>
    </questDescriptionRules>

    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_GetMap" />
        <li Class="QuestNode_GetWalkInSpot" />

        <!-- Require honor rewards enabled for this quest to run -->
        <li Class="QuestNode_RequireRoyalFavorFromFaction">
          <faction>ObsidiaEmpire</faction>
        </li>

        <!-- Honor reward to accepter -->
        <li Class="QuestNode_Set">
          <name>royalFavorReward</name>
          <value>5</value>
        </li>

        <!-- Generate Asker -->
        <li Class="QuestNode_GeneratePawn">
          <kindDef>OEC_Quest_HuntedMessenger</kindDef>
          <storeAs>asker</storeAs>
          <faction>ObsidiaEmpire</faction>
          <biocodeWeaponChance>1</biocodeWeaponChance>
          <biocodeApparelChance>1</biocodeApparelChance>
          <allowPregnant>false</allowPregnant>
          <forcedTraits>
            <li>Wimp</li>
          </forcedTraits>
        </li>
        <li Class="QuestNode_PawnsArrive">
          <pawns>$asker</pawns>
          <joinPlayer>true</joinPlayer>
        </li>

        <!-- Asker leaves on cleanup -->
        <li Class="QuestNode_LeaveOnCleanup">
          <pawns>$asker</pawns>
          <sendStandardLetter>false</sendStandardLetter>
          <inSignalRemovePawn>asker.RanWild</inSignalRemovePawn>
        </li>

        <!-- Asker never does random mood caused mental breaks -->
        <li Class="QuestNode_DisableRandomMoodCausedMentalBreaks">
          <pawns>$asker</pawns>
        </li>
		
		<!-- Get raider faction -->
        <li Class="QuestNode_GetFaction">
          <allowEnemy>true</allowEnemy>
          <mustBePermanentEnemy>true</mustBePermanentEnemy>
          <storeAs>enemyFaction</storeAs>
        </li>

        <!-- Raid arrives -->
        <li Class="QuestNode_Set">
          <name>raidDelayTicks</name>
          <value>$(roundToTicksRough(randInt(1800, 2400)))</value>
        </li>
		<li Class="QuestNode_Delay">
          <delayTicks>$raidDelayTicks</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
			  <li Class="QuestNode_SubScript">
			    <def>Util_Raid</def>
				<prefix>raid</prefix>
				<parms>
				  <inSignal>$inSignal</inSignal>
				  <map>$map</map>
				  <points>$points</points>
				  <enemyFaction>$enemyFaction</enemyFaction>
				  <walkInSpot>$walkInSpot</walkInSpot>
				  <customLetterLabel TKey="LetterLabelChasing">{BASELABEL} chasing [../asker_nameDef]</customLetterLabel>
				  <customLetterText TKey="LetterTextChasing">{BASETEXT}
              \nThe [enemyFaction_pawnsPlural] have come to get [../asker_nameDef].</customLetterText>
				</parms>
			  </li>
			</nodes>
          </node>
        </li>
        
        <!-- Shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>25000</delayTicks>
          <lodgers>$asker</lodgers>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_TransportShip_Pickup</def>
                <parms>
                  <leaveDelayTicks>45000</leaveDelayTicks>
                  <requiredPawns>$asker</requiredPawns>
                  <leaveImmediatelyWhenSatisfied>true</leaveImmediatelyWhenSatisfied>
                </parms>
              </li>
              <li Class="QuestNode_InspectString">
                <targets>$asker</targets>
                <inspectString TKey="InspectStringDepartShuttle">Should depart on shuttle</inspectString>
              </li>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleArrived">Shuttle arrived</label>
                <text TKey="LetterTextShuttleArrived">The shuttle has arrived to collect [asker_nameDef].</text>
                <lookTargets>$pickupShipThing</lookTargets>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Home faction -->
        <li Class="QuestNode_ExtraFaction">
          <pawns>$asker</pawns>
          <factionType>HomeFaction</factionType>
          <faction>ObsidiaEmpire</faction>
          <inSignalsRemovePawn>
            <li>lodgers.RanWild</li>
            <li>lodgers.BecameMutant</li>
          </inSignalsRemovePawn>
        </li>

        <!-- Lock his apparel -->
        <li Class="QuestNode_SetAllApparelLocked">
          <pawns>$asker</pawns>
        </li>

        <!-- Allow him to issue decrees -->
        <li Class="QuestNode_AllowDecreesForLodger">
          <lodger>$asker</lodger>
        </li>

        <!-- - - - - - - -  -->
        <!-- End conditions -->
        <!-- - - - - - - -  -->

        <!-- Asker died -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestDied">Guest died: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextGuestDied">{SUBJECT_definite}, who you were charged to protect, has died. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Surgery Violation -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.SurgeryViolation</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelUnauthorizedSurgery">Unauthorized surgery: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextUnauthorizedSurgery">Unauthorized, violating surgery has been performed on {SUBJECT_definite}, who you were charged to protect. Because of this violation, [asker_pronoun] will now attempt to leave. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>PerformedHarmfulSurgery</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger's xenogerm absorbed -->
        <li Class="QuestNode_Signal" MayRequire="Ludeon.RimWorld.Biotech">
          <inSignal>asker.XenogermAbsorbed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Xenogerm absorbed: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>{SUBJECT_definite}, who you were charged to protect, has had {SUBJECT_possessive} xenogerm forcibly absorbed. Because of this violation, {SUBJECT_pronoun} will now attempt to leave. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>XenogermAbsorbed</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger arrested -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Arrested</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelCaptured">Captured: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextCaptured">{SUBJECT_definite}, who you were charged to host, has been arrested. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnArrested</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Asker left map -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.LeftMap</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestLost">Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextGuestLost">{SUBJECT_definite}, who you were charged to protect, has left the designated settlement. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger ran wild -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.RanWild</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelLodgerRanWild">Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextLodgerRanWild">{SUBJECT_definite}, who you were charged to protect, has run wild. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleDestroyed">Shuttle destroyed</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextShuttleDestroyed">The shuttle sent to collect [asker_nameDef] has been destroyed. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>ShuttleDestroyed</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Give honor to accepter (and development points if applicable) -->
        <li Class="QuestNode_GiveRoyalFavorAndDevelopmentPoints">
          <inSignal>pickupShipThing.SentSatisfied</inSignal>
          <giveToAccepter>true</giveToAccepter>
          <factionOf>$asker</factionOf>
          <amount>$royalFavorReward</amount>
          <isSingleReward>true</isSingleReward>
        </li>
        
        <!-- Shuttle sent -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentSatisfied</inSignal>
          <node Class="QuestNode_End">
            <outcome>Success</outcome>
            <sendStandardLetter>true</sendStandardLetter>
          </node>
        </li>
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentUnsatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelQuestFailed">Quest failed: [resolvedQuestName]</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextQuestFailed">The shuttle sent to collect [asker_nameDef] has departed without [asker_objective]. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>MemberMissedShuttle</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>